package jp.co.run;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

public class DateUtils {

	/**
	 * Compare two date, with date param is a string.
	 * 
	 * @param date1
	 *        The string of date 1. Can not be null or empty.
	 * @param date2
	 *        The string of date 2. Can not be null or empty.
	 * @param pattern
	 *        The pattern of format date.  Can not be null or empty.
	 *        
	 * @return 0 if date1 = date2
	 *         1 if date1 > date2
	 *        -1 if date1 < date2
	 *        -2 if date1 = null or date2 = null.        
	 */
	public static int compareDate(String date1, String date2, String pattern) {
		
		Date date3 = convertStringToDate(date1, pattern);
		Date date4 = convertStringToDate(date2, pattern);
		
		int result = compareDate(date3, date4);
		
		return result;
	}
	
	/**
	 * Compare two date, with date param is Date object.
	 * 
	 * @param date1
	 *        Date object first want to compare.
	 * @param date2
	 *        Date object seconds want to compare.
	 * @return 0 if date1 = date2
	 *         1 if date1 > date2
	 *        -1 if date1 < date2
	 *        -2 if date1 = null or date2 = null.
	 */
	public static int compareDate(Date date1, Date date2) {
		if (date1 == null || date2 == null) {
			return -2;
		}
		
		long time1 = date1.getTime();
		long time2 = date2.getTime();
		
		if (time1 == time2) {
			return 0;
		} else if (time1 > time2) {
			return 1;
		} else {
			return -1;
		}
	}
	
	/**
	 * Convert date object to string with pattern.
	 * 
	 * @param date
	 *        The date object to convert to string.
	 * @param pattern
	 *        The pattern for date format. Set null will using default pattern.
	 * @return date string. Return empty string if date is null
	 */
	public static String convertDateToString(Date date, String pattern) {
		StringBuilder dateString = new StringBuilder();
		DateFormat dateFormat = new SimpleDateFormat();
		
		if (date == null) {
			return dateString.toString();
		}
		
		if (!StringValid.isNullOrEmpty(pattern)) {
			dateFormat = new SimpleDateFormat(pattern);
		}
		
		dateString.append(dateFormat.format(date));
		
		return dateString.toString();
	}
	
	/**
	 * Convert a date string to Date object with pattern.
	 * 
	 * @param date
	 *        date string to convert to Date object.
	 * @param pattern
	 *        The pattern for simple date format.
	 * @return date object if convert success, else return null.
	 */
	public static Date convertStringToDate(String date, String pattern) {
		//Check if date and pattern string is null or invalid date format.
		if (!DateValid.isDate(date, pattern)) {
			return null;
		}
		
		DateFormat dateFormat = new SimpleDateFormat(pattern);
		Date       newDate    = null;
		
		try {
			newDate = dateFormat.parse(date);
		} catch (Exception e) {}
		
		return newDate;
	}
	
	/**
	 * To get current date with pattern and time zone.
	 * 
	 * @param pattern
	 *        The pattern for simple date format. Set null will using default pattern.
	 * @param timeZone
	 * 		  The time zone. Set null will using default time zone
	 * @return date string. Return a empty string if input is invalid.
	 */
	public static String getCurrentDate(String pattern, String timeZone) {
		StringBuffer currentDate = new StringBuffer();	
		Calendar calendar = new GregorianCalendar();
		DateFormat dateFormat = new SimpleDateFormat();
		
		if (!StringValid.isNullOrEmpty(pattern)) {
			dateFormat = new SimpleDateFormat(pattern);
		}
		
		if (!StringValid.isNullOrEmpty(timeZone)) {
			TimeZone timeZone1 = TimeZone.getTimeZone(timeZone);
			dateFormat.setTimeZone(timeZone1);
		}
		
		currentDate.append(dateFormat.format(calendar.getTime()));
		
		return currentDate.toString();
	}
	
	/**
	 * To get last day of month.
	 * 
	 * @param year
	 *        The year have to larger than 0s
	 * @param month
	 *        The month have to between 1 to 12
	 * @param pattern
	 *        The pattern for simple date format. Set null will using default pattern.
	 * @return date string. Return empty string if input is invalid.
	 */
	public static String getLastDayOfMonth(int year, int month, String pattern) {
		StringBuffer dateString = new StringBuffer();
		
		if (year < 1) {
			return dateString.toString();
		}
		
		if (month < 1 || month > 12) {
			return dateString.toString();
		}
		
		Calendar calendar = new GregorianCalendar(year, month, 0);
		Date date = calendar.getTime();
		DateFormat dateFormat = new SimpleDateFormat();
		
		if (!StringValid.isNullOrEmpty(pattern)) {
			dateFormat = new SimpleDateFormat(pattern);
		}
		
		dateString.append(dateFormat.format(date));
		
		return dateString.toString();
	}
	
	public static void main(String[] args) {
		Date date = new Date();
		System.out.println(convertDateToString(null, "dd/MM/yyyy"));
	}
}
