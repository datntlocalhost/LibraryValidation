package jp.co.run;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DateValid {

	/**
	 * Check if a string pattern is valid date pattern format.
	 * 
	 * @param pattern
	 *        The date pattern string to check.
	 * @return true if the pattern string is valid format. Else return <b>false</b>.
	 */
	public static boolean isDatePattern(String pattern) {
		String regex ="^(([dM]{1,2}([ ./-]{1})?[dM]{1,2}([ ./-]{1})?([y]{1,4})?)|(([y]{1,4})?([ ./-]{1})?[dM]{1,2}([ ./-]{1})?[dM]{1,2}))$";
		
		if (StringValid.isNullOrEmpty(pattern)) {
			return false;
		}
		
		return pattern.matches(regex);
	}
	
	/**
	 * Check if the time zone is valid format.
	 * 
	 * @param timeZone
	 *        The time zone string to check.
	 * @return <b>true</b> if the timeZone is valid time zone format.<br>Else return <b>false</b>
	 */
	public static boolean isTimeZone(String timeZone) {
		String regex = "^([a-zA-Z]*([/][_a-zA-Z]+)?)$";
		
		if (StringValid.isNullOrEmpty(timeZone)) {
			return false;
		}
		
		return timeZone.matches(regex);
	}
	
	/**
	 * Check if date string input is valid date parttern format.
	 * 
	 * @param date
	 *        The string date to check. Can not be null or empty.
	 * @param pattern
	 *        The pattern for simple date format. Can not be null or empty.
	 * @return true if the date string input is valid date pattern format, else return false.
	 */
	public static boolean isDate(String date, String pattern) {
		//Check if date and pattern string is null or empty, then return false.
		if (StringValid.isNullOrEmpty(date) || !isDatePattern(pattern)) {
			return false;
		}
		
		DateFormat dateFormat = new SimpleDateFormat(pattern);
		dateFormat.setLenient(false);
		
		try {
			dateFormat.parse(date.trim());
		} catch (Exception e) {
			return false;
		}
		
		return true;
	}
	
	/**
	 * Check if a date string is correct with pattern format,
	 * 
	 * @param date
	 *        The date string to check.
	 * @param pattern
	 *        The pattern date format to compare.
	 * @return true if the date string is correct, else return false.
	 */
	public static boolean isFormatDate(String date, String pattern) {
		return isDate(date, pattern);
	}
	
	/**
	 * Check if date to is larger than date from.
	 * 
	 * @param dateTo
	 *        Date object to check. Can not be null.
	 * @param dateFrom
	 *        Date object to check. Can not be null.
	 * @return true if dateTo < dateFrom, else return false.
	 */
	public static boolean isDateFromTo(Date dateTo, Date dateFrom) {
		int result = DateUtils.compareDate(dateTo, dateFrom);
		
		if (result == -1 || result == -2) {
			return true;
		}
		return false;
	}
	
	/**
	 * Check if date to is larger than date from.
	 * 
	 * @param dateTo
	 *        Date string to check. Can not be null or empty.
	 * @param dateFrom
	 *        Date string to check. Can not be null or empty.
	 * @param pattern
	 *        The pattern for simple date format. Can not be null or empty.
	 * @return true if dateTo < dateFrom, else return false.
	 */
	public static boolean isDateFromTo(String dateTo, String dateFrom, String pattern) {
		//Check if the date string input is valid date pattern format. Return true if invalid.
		if (!isDate(dateTo, pattern) || !isDate(dateFrom, pattern)) {
			return true;
		}
		
		int result = DateUtils.compareDate(dateTo, dateFrom, pattern);
		
		if (result == -1 || result == -2) {
			return true;
		}
		return false;
	}
	
	public static void main(String[] args) {
		System.out.println(isDatePattern("yyyy-dd-M"));
	}
}
